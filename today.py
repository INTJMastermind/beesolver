"""
Checks todays answers from sbsolver.com/answers and updates the dictionary.
"""

import requests
import beesolver
from bs4 import BeautifulSoup

def download(url: str, file_name: str):
    """
    Downloads a website at url and saves it as file_name.
    """
    try:
        r = requests.get(url).text
    except:
        print(f'Unable to load {url}')
        return

    with open(file_name, 'w') as file:
        file.write(r)


def scrape(site):
    """
    Scraper for sbsolver.com. Input is a requests.get(url).text
    """
    soup = BeautifulSoup(site, 'html.parser')

    # Scrape the date
    date = soup.find('span', class_=('bee-date'))
    date = date.a.text

    # Scrape the letters.
    # All the letters are found in a <div class='thinner-space-after>
    # Letters are images, listed in order with the center letter first
    images = soup.find('div', class_='thinner-space-after').find_all('img')
    # Extracting each letter as the last character of image alt text.
    letters = [image['alt'][-1] for image in images]
    letters = ''.join(letters)

    # Scrape the answers
    # All the answers are found in a <table> with class='bee-set'
    bee_set = soup.find('table', class_='bee-set')
    # Each answer is inside a <td> tag with class = 'bee-hover'
    bee_hover = bee_set.find_all('td', class_='bee-hover')
    # The actual string is the text of the <a> tag.
    answers = [item.a.text for item in bee_hover]

    return date, letters, answers


def compare(answers, solutions, dictionary):
    """
    Compares the official answers to the solutions generated by beesolver.
    Removes any words that are not in the official answer list.
    Adds any answers that are not in the solutions set.
    Returns an updated dictionary
    """
    # Solutions not in the official answer list will be removed from the dictionary.
    not_solutions = {word for word in solutions if word not in answers}
    for word in not_solutions:
        dictionary.remove(word)
    print(f'{len(not_solutions)} words removed from dictionary.')

    # Answers not in the solution set will be added to the dictionary.
    missing_answers = {word for word in answers if word not in solutions}
    dictionary.update(missing_answers)
    print(f'{len(missing_answers)} words added to dictionary.')

    return dictionary


def update(words, file):
    # Alphabetize words before writing into dictionary.
    with open(file, 'w') as f:
        for word in sorted(list(words)):
            f.write(word+'\n')

    print(f'{len(words)} words written to {file}.')


def main():
    '''
    Scrapes todays answers from sbsolver.com
    '''
    url = 'https://www.sbsolver.com/answers'
    file_name = 'dictionary.txt'
    
    try:
        print(f'Loading {url}')
        site = requests.get(url).text
    except:
        print(f'Unable to load {url}')
        return
    
    date, letters, answers = scrape(site)
    
    print(f'Puzzle for {date}: {letters}')
    print(f'{len(answers)} Answers:')
    for word in sorted(answers, reverse=True, key=len):
        print(word)

    words = beesolver.load(file_name)
    solutions = beesolver.solve(letters, words)
    print(f'{len(solutions)} solutions found by beesolver.')
    dictionary = compare(set(answers), set(solutions), words)
    update(dictionary, file_name)


if __name__ == '__main__':
    main()